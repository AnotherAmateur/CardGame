using Godot; using System; using System.Collections.Generic; using System.Linq; using CardGameProj.Scripts;  public class CardSelectionMenu : Control { 	public static CardSelectionMenu Instance { get; private set; } 	public static List<int> SelectedCards { get; private set; } = new(); 	public static List<int> LeaderCards { get; private set; } = new(); 	public static List<CardNations> Nations { get; private set; } = new(); 	public static CardNations Nation { get; private set; } 	public static int LeaderCard { get; private set; }  	private PackedScene cardScene = (PackedScene)GD.Load("res://SlaveCardScene.tscn"); 	private GridContainer allCardsGridContainer; 	private GridContainer selectedCardsGridContainer;  	private int minHandSize = 0;   	public override void _Ready() 	{ 		Instance = this; 		allCardsGridContainer = GetNode<ScrollContainer>("AllCardScrollContainer").GetNode<GridContainer>("GridContainer"); 		selectedCardsGridContainer = GetNode<ScrollContainer>("SelectionCardScrollContainer").GetNode<GridContainer>("GridContainer");  		allCardsGridContainer.AddConstantOverride("hseparation", 195); 		allCardsGridContainer.AddConstantOverride("vseparation", 325);  		selectedCardsGridContainer.AddConstantOverride("hseparation", 195); 		selectedCardsGridContainer.AddConstantOverride("vseparation", 325);  		CardDataBase.UpdateCardDataBase(); 		LoadAllCards(); 		ChangeLeader(); 	}   	private void LoadAllCards() 	{ 		SelectedCards = new();  		foreach (var card in CardDataBase.GetAllCards.Where(x =>  			x.Value.nation == CardDataBase.GetCardInfo(LeaderCard).nation || x.Value.type == CardTypes.Leader)) 		{ 			if (card.Value.type == CardTypes.Leader) 			{ 				Nations.Add(card.Value.nation); 				LeaderCards.Add(card.Key); 			} 			else 			{ 				SlaveCardScene cardInstance = (SlaveCardScene)cardScene.Instance(); 				Control t = new(); 				t.Name = card.Key.ToString(); 				allCardsGridContainer.AddChild(t); 				allCardsGridContainer.GetNode<Control>(card.Key.ToString()).AddChild(cardInstance);  				string texturePath = ""; 				try 				{ 					texturePath = CardDataBase.GetCardTexturePath(card.Key); 				} 				catch (Exception) 				{ 					GD.Print(texturePath); 				}  				allCardsGridContainer.GetNode<Control>(card.Key.ToString()).GetChild<SlaveCardScene>(0) 					.SetParams(card.Key.ToString(), new Vector2(175, 285), texturePath, card.Value.text); 			} 		}  		for (int i = 0; i < allCardsGridContainer.Columns; i++) 		{ 			allCardsGridContainer.AddChild(new Control()); 			selectedCardsGridContainer.AddChild(new Control()); 		} 	}   	private void ChangeLeader() 	{ 		int index = LeaderCards.IndexOf(LeaderCard); 		if (LeaderCards.Count == index + 1) 		{ 			LeaderCard = LeaderCards.First(); 		} 		else 		{ 			LeaderCard = LeaderCards[++index]; 		}  		var leaderContainer = GetNode<Control>("NationInfoPanel").GetNode("LeaderContainer");  		foreach (Node node in leaderContainer.GetChildren()) 		{ 			leaderContainer.RemoveChild(node); 		}  		foreach (Node node in selectedCardsGridContainer.GetChildren()) 		{ 			selectedCardsGridContainer.RemoveChild(node); 		}  		foreach (Node node in allCardsGridContainer.GetChildren()) 		{ 			allCardsGridContainer.RemoveChild(node); 		}  		LoadAllCards();  		SlaveCardScene cardInstance = (SlaveCardScene)cardScene.Instance(); 		leaderContainer.AddChild(cardInstance); 		leaderContainer.GetChild<SlaveCardScene>(0).SetParams(LeaderCard.ToString(), new Vector2(175, 285), 			CardDataBase.GetCardTexturePath(LeaderCard), 			CardDataBase.GetCardInfo(LeaderCard).text); 	}   	public void CardSceneEventHandler(string eventName, int cardId) 	{ 		if (eventName == "pressed") 		{ 			if (CardDataBase.GetCardInfo(cardId).type == CardTypes.Leader) 			{ 				ChangeLeader(); 			} 			else if (SelectedCards.Contains(cardId)) 			{ 				Control temp = selectedCardsGridContainer.GetNode<Control>(cardId.ToString()); 				selectedCardsGridContainer.RemoveChild(selectedCardsGridContainer.GetNode<Control>(cardId.ToString())); 				allCardsGridContainer.AddChild(temp); 				allCardsGridContainer.MoveChild(temp, 0);  				SelectedCards.Remove(cardId); 			} 			else 			{ 				Control temp = allCardsGridContainer.GetNode<Control>(cardId.ToString()); 				allCardsGridContainer.RemoveChild(allCardsGridContainer.GetNode<Control>(cardId.ToString())); 				selectedCardsGridContainer.AddChild(temp); 				selectedCardsGridContainer.MoveChild(temp, 0);  				SelectedCards.Add(cardId); 			}  			GetNode<Label>("LabelCountInfo").Text = "SELECTED " + SelectedCards.Count() + " CARD(S)"; 		} 	}   	private void _on_StartButton_pressed() 	{ 		if (SelectedCards.Count() >= minHandSize) 		{ 			GetTree().ChangeSceneTo((PackedScene)GD.Load("res://GameFieldScreen.tscn")); 		} 	} }   
